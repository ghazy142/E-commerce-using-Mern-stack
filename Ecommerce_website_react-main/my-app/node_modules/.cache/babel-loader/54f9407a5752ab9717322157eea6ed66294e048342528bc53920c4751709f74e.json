{"ast":null,"code":"import { createStore, combineReducers, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport { productListReducer, productDetailsReducer } from './reducers/productReducer';\nimport { userLoginReducer, userRegisterReducer, userDetailsReducer, userUpdateProfileReducer, userListReducer, userDeleteReducer } from './reducers/userReducers';\nimport { cartReducer } from './reducers/cartReducers';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { orderCreateReducer, orderDetailsReducer, orderPayReducer, listMyOrdersReducer } from './reducers/orderReducers';\n\n// The reducer function is created using the combineReducers() function to combine all the reducers from the productReducer, \n// userReducers, and cartReducers files. The initialState object contains the initial state of the application, \n// which includes the cartItems and shippingAddress from local storage, and the userInfo from local storage.\nconst reducer = combineReducers({\n  productList: productListReducer,\n  productDetails: productDetailsReducer,\n  cart: cartReducer,\n  userLogin: userLoginReducer,\n  userRegister: userRegisterReducer,\n  userDetails: userDetailsReducer,\n  userUpdateProfile: userUpdateProfileReducer,\n  userList: userListReducer,\n  userDelete: userDeleteReducer,\n  orderCreate: orderCreateReducer,\n  orderDetails: orderDetailsReducer,\n  orderPay: orderPayReducer,\n  listMyOrders: listMyOrdersReducer\n});\nconst cartItemsFromStorage = localStorage.getItem('cartItems') ? JSON.parse(localStorage.getItem('cartItems')) : [];\nconst userInfoFromStorage = localStorage.getItem('userInfo') ? JSON.parse(localStorage.getItem('userInfo')) : null;\nconst shippingAddressFromStorage = localStorage.getItem('shippingAddress') ? JSON.parse(localStorage.getItem('shippingAddress')) : {};\nconst initialState = {\n  cart: {\n    cartItems: cartItemsFromStorage,\n    shippingAddress: shippingAddressFromStorage\n  },\n  userLogin: {\n    userInfo: userInfoFromStorage\n  }\n};\nconst middleware = [thunk];\nconst store = createStore(reducer, initialState, composeWithDevTools(applyMiddleware(...middleware)));\nexport default store;\n\n// Overall, Redux helps to simplify the management of application state, making it easier to debug, test,\n//  and maintain complex applications.","map":{"version":3,"names":["createStore","combineReducers","applyMiddleware","thunk","productListReducer","productDetailsReducer","userLoginReducer","userRegisterReducer","userDetailsReducer","userUpdateProfileReducer","userListReducer","userDeleteReducer","cartReducer","composeWithDevTools","orderCreateReducer","orderDetailsReducer","orderPayReducer","listMyOrdersReducer","reducer","productList","productDetails","cart","userLogin","userRegister","userDetails","userUpdateProfile","userList","userDelete","orderCreate","orderDetails","orderPay","listMyOrders","cartItemsFromStorage","localStorage","getItem","JSON","parse","userInfoFromStorage","shippingAddressFromStorage","initialState","cartItems","shippingAddress","userInfo","middleware","store"],"sources":["M:/تالته حاسبات/Second Term/Software Engineering/ff/Ecommerce_website_react-main/my-app/src/store.js"],"sourcesContent":["import { createStore, combineReducers, applyMiddleware } from 'redux'\nimport thunk from 'redux-thunk'\nimport { productListReducer, productDetailsReducer } from './reducers/productReducer'\nimport { userLoginReducer, userRegisterReducer, userDetailsReducer, userUpdateProfileReducer, userListReducer, userDeleteReducer } from './reducers/userReducers'\nimport { cartReducer } from './reducers/cartReducers'\nimport { composeWithDevTools } from 'redux-devtools-extension'\nimport { orderCreateReducer, orderDetailsReducer, orderPayReducer, listMyOrdersReducer } from './reducers/orderReducers'\n\n\n\n\n// The reducer function is created using the combineReducers() function to combine all the reducers from the productReducer, \n// userReducers, and cartReducers files. The initialState object contains the initial state of the application, \n// which includes the cartItems and shippingAddress from local storage, and the userInfo from local storage.\nconst reducer = combineReducers({\n    productList: productListReducer,\n    productDetails: productDetailsReducer,\n    cart: cartReducer,\n    userLogin: userLoginReducer,\n    userRegister: userRegisterReducer,\n    userDetails: userDetailsReducer,\n    userUpdateProfile: userUpdateProfileReducer,\n    userList: userListReducer,\n    userDelete: userDeleteReducer,\n    orderCreate: orderCreateReducer,\n    orderDetails: orderDetailsReducer,\n    orderPay: orderPayReducer,\n    listMyOrders: listMyOrdersReducer\n  })\n  \n  const cartItemsFromStorage = localStorage.getItem('cartItems')\n    ? JSON.parse(localStorage.getItem('cartItems'))\n    : []\n  \n  const userInfoFromStorage = localStorage.getItem('userInfo')\n    ? JSON.parse(localStorage.getItem('userInfo'))\n    : null\n\n    const shippingAddressFromStorage = localStorage.getItem('shippingAddress')\n    ? JSON.parse(localStorage.getItem('shippingAddress'))\n    : {}\n\n\n  const initialState = {\n    cart: { cartItems: cartItemsFromStorage ,\n            shippingAddress: shippingAddressFromStorage},\n    userLogin: { userInfo: userInfoFromStorage }\n  }\n  \n  const middleware = [thunk]\n  \n  const store = createStore(\n    reducer,\n    initialState,\n    composeWithDevTools(applyMiddleware(...middleware))\n  )\n  \n  export default store\n\n\n\n  // Overall, Redux helps to simplify the management of application state, making it easier to debug, test,\n  //  and maintain complex applications."],"mappings":"AAAA,SAASA,WAAW,EAAEC,eAAe,EAAEC,eAAe,QAAQ,OAAO;AACrE,OAAOC,KAAK,MAAM,aAAa;AAC/B,SAASC,kBAAkB,EAAEC,qBAAqB,QAAQ,2BAA2B;AACrF,SAASC,gBAAgB,EAAEC,mBAAmB,EAAEC,kBAAkB,EAAEC,wBAAwB,EAAEC,eAAe,EAAEC,iBAAiB,QAAQ,yBAAyB;AACjK,SAASC,WAAW,QAAQ,yBAAyB;AACrD,SAASC,mBAAmB,QAAQ,0BAA0B;AAC9D,SAASC,kBAAkB,EAAEC,mBAAmB,EAAEC,eAAe,EAAEC,mBAAmB,QAAQ,0BAA0B;;AAKxH;AACA;AACA;AACA,MAAMC,OAAO,GAAGjB,eAAe,CAAC;EAC5BkB,WAAW,EAAEf,kBAAkB;EAC/BgB,cAAc,EAAEf,qBAAqB;EACrCgB,IAAI,EAAET,WAAW;EACjBU,SAAS,EAAEhB,gBAAgB;EAC3BiB,YAAY,EAAEhB,mBAAmB;EACjCiB,WAAW,EAAEhB,kBAAkB;EAC/BiB,iBAAiB,EAAEhB,wBAAwB;EAC3CiB,QAAQ,EAAEhB,eAAe;EACzBiB,UAAU,EAAEhB,iBAAiB;EAC7BiB,WAAW,EAAEd,kBAAkB;EAC/Be,YAAY,EAAEd,mBAAmB;EACjCe,QAAQ,EAAEd,eAAe;EACzBe,YAAY,EAAEd;AAChB,CAAC,CAAC;AAEF,MAAMe,oBAAoB,GAAGC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC,GAC1DC,IAAI,CAACC,KAAK,CAACH,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC,CAAC,GAC7C,EAAE;AAEN,MAAMG,mBAAmB,GAAGJ,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC,GACxDC,IAAI,CAACC,KAAK,CAACH,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC,CAAC,GAC5C,IAAI;AAEN,MAAMI,0BAA0B,GAAGL,YAAY,CAACC,OAAO,CAAC,iBAAiB,CAAC,GACxEC,IAAI,CAACC,KAAK,CAACH,YAAY,CAACC,OAAO,CAAC,iBAAiB,CAAC,CAAC,GACnD,CAAC,CAAC;AAGN,MAAMK,YAAY,GAAG;EACnBlB,IAAI,EAAE;IAAEmB,SAAS,EAAER,oBAAoB;IAC/BS,eAAe,EAAEH;EAA0B,CAAC;EACpDhB,SAAS,EAAE;IAAEoB,QAAQ,EAAEL;EAAoB;AAC7C,CAAC;AAED,MAAMM,UAAU,GAAG,CAACxC,KAAK,CAAC;AAE1B,MAAMyC,KAAK,GAAG5C,WAAW,CACvBkB,OAAO,EACPqB,YAAY,EACZ1B,mBAAmB,CAACX,eAAe,CAAC,GAAGyC,UAAU,CAAC,CACpD,CAAC;AAED,eAAeC,KAAK;;AAIpB;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}